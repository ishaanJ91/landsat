// Load the Landsat 8 Surface Reflectance Image Collection
var longitude = 40;
var latitude = 2;
var landsatSR = ee.ImageCollection('LANDSAT/LC08/C02/T1_L2')
                  .filterDate('2024-09-1', '2024-09-25') // Broaden date range
                  .filterBounds(ee.Geometry.Point([longitude, latitude])); // Focus on your area of interest

// Check the number of images available
print('Number of images:', landsatSR.size());

// List available images to verify
var imageList = landsatSR.toList(landsatSR.size());
print('Image List:', imageList);

// Get the first image from the collection
var image = landsatSR.first();

// Check if an image was returned
if (image) {
  // Convert DN values to Surface Reflectance using the scale factors
  var surfaceReflectance = image.select(['SR_B4', 'SR_B5']) // Select Red (B4) and NIR (B5) bands
                                 .multiply(0.0000275).add(-0.2);

  // Calculate NDVI using the NIR (B5) and Red (B4) bands
  var ndvi = surfaceReflectance.normalizedDifference(['SR_B5', 'SR_B4']).rename('NDVI');

  // Define visualization parameters for different NDVI ranges
  var ndviLowPalette = ['#D2B48C']; // Light brown for NDVI values below 0.2
  var ndviMidPalette = ['yellow'];  // Yellow for NDVI values between 0.2 and 0.5
  var ndviHighPalette = ['green'];  // Green for NDVI values above 0.5

  // Create masks for different NDVI ranges
  var ndviLow = ndvi.updateMask(ndvi.lt(0.2));
  var ndviMid = ndvi.updateMask(ndvi.gte(0.2).and(ndvi.lt(0.5)));
  var ndviHigh = ndvi.updateMask(ndvi.gte(0.5));

  // Add NDVI layers to the map with their respective palettes
  Map.addLayer(ndviLow, {min: -1, max: 0.2, palette: ndviLowPalette}, 'NDVI < 0.2 (Brown)');
  Map.addLayer(ndviMid, {min: 0.2, max: 0.5, palette: ndviMidPalette}, '0.2 ≤ NDVI < 0.5 (Yellow)');
  Map.addLayer(ndviHigh, {min: 0.5, max: 1, palette: ndviHighPalette}, 'NDVI ≥ 0.5 (Green)');

  // Extract cloud information from the QA_PIXEL band
  var qaPixel = image.select('QA_PIXEL');

  // Extract cloud confidence bits and cloud bit
  var cloudConfidenceHigh = qaPixel.bitwiseAnd(1 << 4).neq(0); // High confidence in cloud
  var cloudFlag = qaPixel.bitwiseAnd(1 << 5).neq(0); // Cloud flag set

  // Combine both flags for the final cloud mask
  var cloudMask = cloudConfidenceHigh.or(cloudFlag);

  // Create a 90m x 90m region (3x3 pixels, each 30m) centered on the point of interest
  var gridRegion = ee.Geometry.Point([longitude, latitude]).buffer(45); // Buffer by 45m to get 90m x 90m

  // Calculate the cloud coverage percentage within the 3x3 grid area
  var cloudCoverage = cloudMask.reduceRegion({
    reducer: ee.Reducer.sum(),
    geometry: gridRegion,
    scale: 30,
    maxPixels: 1e9
  }).get('QA_PIXEL'); // Get the number of cloud pixels

  // Get the total number of pixels in the 3x3 grid
  var totalPixels = ee.Number(image.select('QA_PIXEL').reduceRegion({
    reducer: ee.Reducer.count(),
    geometry: gridRegion,
    scale: 30,
    maxPixels: 1e9
  }).get('QA_PIXEL'));

  // Calculate the cloud coverage percentage
  var cloudCoveragePercentage = ee.Number(cloudCoverage).divide(totalPixels).multiply(100);

  // Print the cloud coverage percentage
  print('Cloud Coverage Percentage (3x3 grid):', cloudCoveragePercentage);

  // Extract the mean NDVI value for the 3x3 grid
  var ndviValue = ndvi.reduceRegion({
    reducer: ee.Reducer.mean(),
    geometry: gridRegion,
    scale: 30
  });

  // Print the average NDVI value for the 3x3 grid
  print('Average NDVI for 3x3 grid:', ndviValue);

  // Center the map on the selected point
  Map.centerObject(ee.Geometry.Point([longitude, latitude]), 8);
  
  // Display the 3x3 grid on the map for visualization
  Map.addLayer(gridRegion, {}, '3x3 Grid Region');
} else {
  print('No images found for the specified date range and location.');
}
